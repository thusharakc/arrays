Problem Description
You are given an integer array C of size A. Now you need to find a subarray (contiguous elements) so that the sum of contiguous elements is maximum.
But the sum must not exceed B.

//BRUTE FORCE SOLUTION   o(N^3)

public class Solution {
    public int maxSubarray(int A, int B, ArrayList<Integer> C) {

        // brute force
        int maxSum=0;
        for(int i=0;i<A;i++){
            for(int k=i;k<A;k++){
                int sum=0;
                for(int start=i;start<=k;start++){
                    sum+=C.get(start);
                }
               if(sum<=B){
                    maxSum=Math.max(maxSum,sum);
                 }
            }
        }
        return maxSum;
    }
}


//USING PREFIX SUM  tc O(N^2)  SC O(N)

public class Solution {
    public int maxSubarray(int A, int B, ArrayList<Integer> C) {

        ArrayList<Integer> prefixSum=new ArrayList<Integer>();
        prefixSum.add(0,C.get(0));
        for(int j=1;j<A;j++){
            prefixSum.add(j,C.get(j)+prefixSum.get(j-1));
        }

        // prefix sum method
        int maxSum=0;
        for(int i=0;i<A;i++){
            for(int k=i;k<A;k++){
                int sum=0;
               if(i==0){
                   sum+=prefixSum.get(k);
               }else{
                   sum+=prefixSum.get(k)-prefixSum.get(i-1);
               }
               if(sum<=B){
                    maxSum=Math.max(maxSum,sum);
                 }
            }
        }
        return maxSum;
    }
}

CARRY FORWARD METHOD

public class Solution {
    public int maxSubarray(int A, int B, ArrayList<Integer> C) {

        // CARRY FORWARD
        int maxSum=0;
        for(int i=0;i<A;i++){
            int sum=0;
            for(int k=i;k<A;k++){
                
              sum+=C.get(k);
               if(sum<=B){
                    maxSum=Math.max(maxSum,sum);
                 }
            }
        }
        return maxSum;
    }
}





